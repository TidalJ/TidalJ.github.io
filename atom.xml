<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://tidalj.github.io/atom.xml" rel="self"/>
  
  <link href="https://tidalj.github.io/"/>
  <updated>2023-08-04T05:18:30.039Z</updated>
  <id>https://tidalj.github.io/</id>
  
  <author>
    <name>Chao Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vu2 and Vue3</title>
    <link href="https://tidalj.github.io/2023/08/04/Vu2-and-Vue3/"/>
    <id>https://tidalj.github.io/2023/08/04/Vu2-and-Vue3/</id>
    <published>2023-08-04T05:14:22.000Z</published>
    <updated>2023-08-04T05:18:30.039Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"> vue2 vs [vue3](https://so.csdn.net/so/search?q=vue3&amp;spm=1001.2101.3001.7020)</span><br><span class="line">=============================================================================</span><br><span class="line"></span><br><span class="line">对比</span><br><span class="line"></span><br><span class="line">vue2</span><br><span class="line"></span><br><span class="line">vue3</span><br><span class="line"></span><br><span class="line">脚手架</span><br><span class="line"></span><br><span class="line">命令式</span><br><span class="line"></span><br><span class="line">可视化创建脚⼿架</span><br><span class="line"></span><br><span class="line">组件通信</span><br><span class="line"></span><br><span class="line">见下文</span><br><span class="line"></span><br><span class="line">见下文</span><br><span class="line"></span><br><span class="line">数据监听</span><br><span class="line"></span><br><span class="line">watch,computed</span><br><span class="line"></span><br><span class="line">watch,watchEffect,computed</span><br><span class="line"></span><br><span class="line">双向绑定</span><br><span class="line"></span><br><span class="line">Object.defineProperty</span><br><span class="line"></span><br><span class="line">ProxyAPI</span><br><span class="line"></span><br><span class="line">见下文</span><br><span class="line"></span><br><span class="line">见下文</span><br><span class="line"></span><br><span class="line">api</span><br><span class="line"></span><br><span class="line">选项式</span><br><span class="line"></span><br><span class="line">组合式</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">双向绑定更新</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">**vue2** 的[双向数据绑定](https://so.csdn.net/so/search?q=%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A&amp;spm=1001.2101.3001.7020)是利⽤ES5 的⼀个 API ，Object.defineProperty()对数据进⾏劫持 结合 发布订阅模式的⽅式来实现的。</span><br><span class="line"></span><br><span class="line">**vue3** 中使⽤了 ES6 的 ProxyAPI 对数据代理，通过 reactive() 函数给每⼀个对象都包⼀层 Proxy，通过 Proxy 监听属性的变化，从⽽ 实现对数据的监控。</span><br><span class="line"></span><br><span class="line">&gt; 这⾥是相⽐于vue2版本，使⽤proxy的优势如下</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1.**defineProperty只能监听某个属性**，不能对全对象监听 可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</span><br><span class="line">&gt; </span><br><span class="line">&gt; 2.**可以监听数组，不⽤再去单独的对数组做特异性操作**,通过Proxy可以直接拦截所有对象类型数据的操作，完美⽀持对数组的监听。</span><br><span class="line"></span><br><span class="line">实例化</span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">Vue2.x中new出的实例对象，所有的东西都在这个vue对象上，这样其实⽆论你⽤到还是没⽤到，都会跑⼀遍，这样不仅提⾼了性能消耗，也⽆疑增加了⽤户加载时间。</span><br><span class="line"></span><br><span class="line">⽽vue3.0中可以⽤ES module imports按需引⼊，如：keep-alive内置组件、v-model指令，等等，不仅我们开发起来更加的便捷，减少 了内存消耗，也同时减少了⽤户加载时间，优化⽤户体验。</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">获取props</span><br><span class="line">==========</span><br><span class="line"></span><br><span class="line">vue2在script代码块可以直接获取props，vue3通过setup指令传递</span><br><span class="line"></span><br><span class="line">    vue2：console.log(‘props’,this.xxx)vue3：setup(props,context){ console.log(‘props’,props) }</span><br><span class="line"></span><br><span class="line">数据和方法的定义</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">Vue2使⽤的是选项类型API（Options API），Vue3使⽤的是合成型API（Composition API）</span><br><span class="line"></span><br><span class="line">Vue2：</span><br><span class="line"></span><br><span class="line">    data() { return {}; }, methods:{ }</span><br><span class="line"></span><br><span class="line">Vue3：</span><br><span class="line"></span><br><span class="line">数据和⽅法都定义在setup中，并统⼀进⾏return{}</span><br><span class="line"></span><br><span class="line">给父组件传值emit</span><br><span class="line">==========</span><br><span class="line"></span><br><span class="line">    vue2：this.$emit()vue3：setup(props,context){context.emit()}</span><br><span class="line"></span><br><span class="line"> watchEffect</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">Vue3中除了watch，还引入了副作用监听函数watchEffect，用过之后我发现它和React中的useEffect很像，只不过watchEffect不需要传入依赖项。</span><br><span class="line"></span><br><span class="line">那么什么是watchEffect呢？</span><br><span class="line"></span><br><span class="line">watchEffect它会立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</span><br><span class="line"></span><br><span class="line">computed和watch所依赖的数据必须是响应式的。Vue3引入了watchEffect,watchEffect 相当于将 watch 的依赖源和回调函数合并，当任何你有用到的响应式依赖更新时，该回调函数便会重新执行。不同于 watch的是watchEffect的回调函数会被立即执行，即（{ immediate: true }）。</span><br><span class="line"></span><br><span class="line">组件通信</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">注意</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">props中数据流是单项的，即子组件不可改变父组件传来的值</span><br><span class="line"></span><br><span class="line">在组合式API中，如果想在子组件中用其它变量接收props的值时需要使用toRef将props中的属性转为响应式。</span><br><span class="line"></span><br><span class="line">### attrs和listeners</span><br><span class="line"></span><br><span class="line">子组件使用$attrs可以获得父组件除了props传递的属性和特性绑定属性 (class和 style)之外的所有属性。</span><br><span class="line"></span><br><span class="line">子组件使用$listeners可以获得父组件(不含.native修饰器的)所有v-on事件监听器，在Vue3中已经不再使用；但是Vue3中的attrs不仅可以获得父组件传来的属性也可以获得父组件v-on事件监听器</span><br><span class="line"></span><br><span class="line">路由</span><br><span class="line">==</span><br><span class="line"></span><br><span class="line">vue3和vue2路由常用功能只是写法上有些区别：</span><br><span class="line"></span><br><span class="line">`vue3的beforeRouteEnter`作为路由守卫的示例是因为它在`setup`语法糖中是无法使用的；大家都知道`setup`中组件实例已经创建，是能够获取到组件实例的。而`beforeRouteEnter`是再进入路由前触发的，此时组件还未创建，所以是无法用在`setup`中的；如果想在setup语法糖中使用则需要再写一个`script` 如下：</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;export default {  beforeRouteEnter(to, from, next) {    // 在渲染该组件的对应路由被 confirm 前调用    next()  },};&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">vue3路由写法：</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;import { defineComponent } from 'vue'import { useRoute, useRouter } from 'vue-router'export default defineComponent({  beforeRouteEnter (to, from, next) {    // 在渲染该组件的对应路由被 confirm 前调用    next()  },  beforeRouteLeave ((to, from, next)=&gt;{//离开当前的组件，触发    next()         }),  beforeRouteLeave((to, from, next)=&gt;{//离开当前的组件，触发    next()        }),  setup() {    const router = useRouter()    const route = useRoute()    const toPage = () =&gt; {      router.push(xxx)    }     //获取params 注意是route    route.params    //获取query    route.query    return {      toPage    }  },});&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">vue2写法：</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;export default {  beforeRouteEnter (to, from, next) {    // 在渲染该组件的对应路由被 confirm 前调用    next()  },  beforeRouteEnter (to, from, next) {    // 在渲染该组件的对应路由被 confirm 前调用    next()  },  beforeRouteLeave ((to, from, next)=&gt;{//离开当前的组件，触发    next()         }),  beforeRouteLeave((to, from, next)=&gt;{//离开当前的组件，触发    next()        }),  methods:{    toPage(){      //路由跳转      this.$router.push(xxx)    }  },  created(){    //获取params    this.$route.params    //获取query    this.$route.query  }}&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"> 总结</span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">vue2和vue3比较还是有很多不一样的地方，比如setup语法糖的形式最为便捷而且更符合开发者习惯，未来vue3将会大面积使用这种规则，这样更加符合开发习惯和降低后续维护的成本～</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://tidalj.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
