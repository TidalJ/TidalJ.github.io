<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vu2 and Vue3</title>
      <link href="/2023/08/01/Vu2-and-Vue3/"/>
      <url>/2023/08/01/Vu2-and-Vue3/</url>
      
        <content type="html"><![CDATA[<h1><a name="t1"></a>vue2 vs <a href="https://so.csdn.net/so/search?q=vue3&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=vue3&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;vue3\&quot;}&quot;}" data-tit="vue3" data-pretit="vue3">vue3</a></h1> <div class="table-box"><table border="1" cellpadding="1" cellspacing="1" style="width:500px;"><tbody><tr><td>对比</td><td>vue2</td><td>vue3</td></tr><tr><td>脚手架</td><td>命令式</td><td>可视化创建脚⼿架</td></tr><tr><td>组件通信</td><td>见下文</td><td>见下文</td></tr><tr><td>数据监听</td><td>watch,computed</td><td>watch,watchEffect,computed</td></tr><tr><td>双向绑定</td><td>Object.defineProperty</td><td>ProxyAPI</td></tr><tr><td></td><td>见下文</td><td>见下文</td></tr><tr><td>api</td><td>选项式</td><td>组合式</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></tbody></table></div> <h1><a name="t2"></a>双向绑定更新</h1> <p><strong>vue2</strong> 的<a href="https://so.csdn.net/so/search?q=%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;双向数据绑定\&quot;}&quot;}" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A&amp;spm=1001.2101.3001.7020&quot;,&quot;extra&quot;:&quot;{\&quot;searchword\&quot;:\&quot;双向数据绑定\&quot;}&quot;}" data-tit="双向数据绑定" data-pretit="双向数据绑定">双向数据绑定</a>是利⽤ES5 的⼀个 API ，Object.defineProperty()对数据进⾏劫持 结合 发布订阅模式的⽅式来实现的。</p> <p><strong>vue3</strong> 中使⽤了 ES6 的 ProxyAPI 对数据代理，通过 reactive() 函数给每⼀个对象都包⼀层 Proxy，通过 Proxy 监听属性的变化，从⽽ 实现对数据的监控。</p> <blockquote>  <p>这⾥是相⽐于vue2版本，使⽤proxy的优势如下</p>  <p>1.<strong>defineProperty只能监听某个属性</strong>，不能对全对象监听 可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</p>  <p>2.<strong>可以监听数组，不⽤再去单独的对数组做特异性操作</strong>,通过Proxy可以直接拦截所有对象类型数据的操作，完美⽀持对数组的监听。</p> </blockquote> <h1><a name="t3"></a>实例化</h1> <p>Vue2.x中new出的实例对象，所有的东西都在这个vue对象上，这样其实⽆论你⽤到还是没⽤到，都会跑⼀遍，这样不仅提⾼了性能消耗，也⽆疑增加了⽤户加载时间。</p> <p>⽽vue3.0中可以⽤ES module imports按需引⼊，如：keep-alive内置组件、v-model指令，等等，不仅我们开发起来更加的便捷，减少 了内存消耗，也同时减少了⽤户加载时间，优化⽤户体验。</p> <h1><a name="t5"></a><br> 获取props</h1> <p>vue2在script代码块可以直接获取props，vue3通过setup指令传递</p> <pre data-index="0"><code class="hljs language-typescript"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">vue2：<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(‘props’,<span class="hljs-variable language_">this</span>.<span class="hljs-property">xxx</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">vue3：<span class="hljs-title function_">setup</span>(<span class="hljs-params">props,context</span>){ <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(‘props’,props) }</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}" onclick="hljs.signin(event)"></div></pre> <h1><a name="t6"></a>数据和方法的定义</h1> <p>Vue2使⽤的是选项类型API（Options API），Vue3使⽤的是合成型API（Composition API）</p> <p>Vue2：</p> <pre data-index="1"><code class="hljs language-haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>() { <span class="hljs-title">return</span> {}; }, methods:{ }</span></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}" onclick="hljs.signin(event)"></div></pre> <p>Vue3：</p> <p>数据和⽅法都定义在setup中，并统⼀进⾏return{}</p> <h1><a name="t7"></a>给父组件传值emit</h1> <pre data-index="2"><code class="hljs language-scss"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">vue2：this.<span class="hljs-variable">$emit</span>()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">vue3：<span class="hljs-built_in">setup</span>(props,context){context<span class="hljs-selector-class">.emit</span>()}</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}" onclick="hljs.signin(event)"></div></pre> <h1><a name="t8"></a>&nbsp;watchEffect</h1> <p>Vue3中除了watch，还引入了副作用监听函数watchEffect，用过之后我发现它和React中的useEffect很像，只不过watchEffect不需要传入依赖项。</p> <p>那么什么是watchEffect呢？</p> <p>watchEffect它会立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p> <p>computed和watch所依赖的数据必须是响应式的。Vue3引入了watchEffect,watchEffect 相当于将 watch 的依赖源和回调函数合并，当任何你有用到的响应式依赖更新时，该回调函数便会重新执行。不同于 watch的是watchEffect的回调函数会被立即执行，即（{ immediate: true }）。</p> <h1><a name="t9"></a>组件通信</h1> <h2><a name="t10"></a>注意</h2> <p>props中数据流是单项的，即子组件不可改变父组件传来的值</p> <p>在组合式API中，如果想在子组件中用其它变量接收props的值时需要使用toRef将props中的属性转为响应式。</p> <h3><a name="t11"></a>attrs和listeners</h3> <p>子组件使用$attrs可以获得父组件除了props传递的属性和特性绑定属性 (class和 style)之外的所有属性。</p> <p>子组件使用$listeners可以获得父组件(不含.native修饰器的)所有v-on事件监听器，在Vue3中已经不再使用；但是Vue3中的attrs不仅可以获得父组件传来的属性也可以获得父组件v-on事件监听器</p> <h1><a name="t12"></a>路由</h1> <p>vue3和vue2路由常用功能只是写法上有些区别：</p> <p><code>vue3的beforeRouteEnter</code>作为路由守卫的示例是因为它在<code>setup</code>语法糖中是无法使用的；大家都知道<code>setup</code>中组件实例已经创建，是能够获取到组件实例的。而<code>beforeRouteEnter</code>是再进入路由前触发的，此时组件还未创建，所以是无法用在<code>setup</code>中的；如果想在setup语法糖中使用则需要再写一个<code>script</code> 如下：</p> <pre data-index="3"><code class="hljs language-cobol"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-operator">&lt;</span>script<span class="hljs-operator">&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export <span class="hljs-keyword">default</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  beforeRouteEnter(<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">next</span>) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 在渲染该组件的对应路由被 confirm 前调用</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">next</span>()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  },</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">};</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>script<span class="hljs-operator">&gt;</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}" onclick="hljs.signin(event)"></div></pre> <p>vue3路由写法：</p> <pre data-index="4" class="set-code-hide" name="code"><code class="hljs language-cobol"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-operator">&lt;</span>script<span class="hljs-operator">&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import { defineComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">import { useRoute, useRouter } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export <span class="hljs-keyword">default</span> defineComponent({</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  beforeRouteEnter (<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">next</span>) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 在渲染该组件的对应路由被 confirm 前调用</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">next</span>()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  },</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  beforeRouteLeave ((<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">next</span>)<span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>{<span class="hljs-operator">/</span><span class="hljs-operator">/</span>离开当前的组件，触发</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">next</span>()       </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  }),</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  beforeRouteLeave((<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">next</span>)<span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>{<span class="hljs-operator">/</span><span class="hljs-operator">/</span>离开当前的组件，触发</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">next</span>()      </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  }),</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  setup() {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    const router <span class="hljs-operator">=</span> useRouter()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    const route <span class="hljs-operator">=</span> useRoute()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    const toPage <span class="hljs-operator">=</span> () <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      router.push(xxx)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>获取params 注意是route</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    route.params</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>获取query</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    route.query</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">return</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      toPage</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  },</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">});</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>script<span class="hljs-operator">&gt;</span></div></div></li></ol></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"></span></div><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}" onclick="hljs.signin(event)"></div></pre> <p>vue2写法：</p> <pre data-index="5" class="set-code-hide" name="code"><code class="hljs language-cobol"><ol class="hljs-ln" style="width:100%"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-operator">&lt;</span>script<span class="hljs-operator">&gt;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">export <span class="hljs-keyword">default</span> {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  beforeRouteEnter (<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">next</span>) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 在渲染该组件的对应路由被 confirm 前调用</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">next</span>()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  },</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  beforeRouteEnter (<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">next</span>) {</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 在渲染该组件的对应路由被 confirm 前调用</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">next</span>()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  },</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  beforeRouteLeave ((<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">next</span>)<span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>{<span class="hljs-operator">/</span><span class="hljs-operator">/</span>离开当前的组件，触发</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">next</span>()       </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  }),</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  beforeRouteLeave((<span class="hljs-keyword">to</span>, <span class="hljs-keyword">from</span>, <span class="hljs-keyword">next</span>)<span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>{<span class="hljs-operator">/</span><span class="hljs-operator">/</span>离开当前的组件，触发</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">next</span>()      </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  }),</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  methods:{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    toPage(){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      <span class="hljs-operator">/</span><span class="hljs-operator">/</span>路由跳转</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">      this.$router.push(xxx)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  },</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  created(){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>获取params</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    this.$route.params</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>获取query</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    this.$route.query</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>script<span class="hljs-operator">&gt;</span></div></div></li></ol></code><div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"></span></div><div class="hljs-button signin" data-title="登录后复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}" onclick="hljs.signin(event)"></div></pre> <h1><a name="t13"></a>&nbsp;总结</h1> <p>vue2和vue3比较还是有很多不一样的地方，比如setup语法糖的形式最为便捷而且更符合开发者习惯，未来vue3将会大面积使用这种规则，这样更加符合开发习惯和降低后续维护的成本～</p> ]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3开发教程</title>
      <link href="/2023/02/07/Vue3%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/"/>
      <url>/2023/02/07/Vue3%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title=" 前言"></a> 前言</h1><p>本文是笔者学习vue前端技术过程的总结，其中包括vue开发需要了解的相关技术如：node、ES6、TypeScript、vite、ElementUI。以vue作为主线来介绍相关技术，最后通过一个典型的前端应用来体会vue的开发。希望笔者的内容能帮助将要学习vue的同学，由于本人对前端技术了解有限，如有理解不到位的地方希望各路大神给予意见。同时也欢迎大家的留言与交流。</p><hr><blockquote><p>提示：本文中的技术关键字可以链接到该技术的官网站</p></blockquote><h1 id="一、学习Vue前需要了解的内容"><a href="#一、学习Vue前需要了解的内容" class="headerlink" title="一、学习Vue前需要了解的内容"></a>一、学习Vue前需要了解的内容</h1><h2 id="web基础知识"><a href="#web基础知识" class="headerlink" title="web基础知识"></a>web基础知识</h2><p><a href="https://www.w3school.com.cn/html/index.asp" title="html">html</a>、<a href="https://www.w3school.com.cn/css/index.asp" title="css">css</a>、<a href="https://www.w3school.com.cn/js/index.asp" title="javascript">javascript</a></p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>官方的描述“<a href="https://nodejs.org/en/" title="Node.js">Node.js</a> 是一个基于 Chrome V8 引擎的 JavaScript 运行时。”笔这认为就是一种编程语言的运行平台。类似java语言中的JVM。<a href="http://nodejs.cn/" title="中文网站地址">中文网站地址</a></p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>npm包管理器，可用于管理node.js的开发依赖的类库。类似java开发中的maven或gradle。在<a href="https://www.npmjs.com/" title="npm">npm</a>网站可以查询各种开发资源。通过npm install 可以安装到本地。</p><pre><code>npm install vue</code></pre><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>官网描述”<a href="https://www.tslang.cn/index.html" title="typescript">typescript</a>是javascript类型的超集，它可以编译成纯javascript。”笔者人为javascript的的语法typescript都支持，但是typescript功能更加强大。下面介绍一下开发中比较常用的代码，更详细请参考<a href="https://www.tslang.cn/docs/home.html" title="用户指南">用户指南</a>。<br><strong>变量</strong><br>格式：&lt;修饰符&gt; 名称:&lt;类型&gt;</p><pre><code>let isDone: boolean = false;let decLiteral: number = 6;let name: string = "bob";let list: number[] = [1, 2, 3];</code></pre><p><strong>模块</strong></p><p><strong>导入</strong>：使用关键字 “<code>import”</code>来导入其它模块中的导出内容。</p><pre><code>//导入一个模块中的某个导出内容import { ZipCodeValidator } from "./ZipCodeValidator";let myValidator = new ZipCodeValidator(); //对导入内容重命名import { ZipCodeValidator as ZCV } from "./ZipCodeValidator";let myValidator = new ZCV(); //将整个模块导入到一个变量，并通过它来访问模块的导出部分import * as validator from "./ZipCodeValidator";let myValidator = new validator.ZipCodeValidator();</code></pre><p><strong>导出</strong>：任何声明（比如变量，函数，类，类型别名或接口）都能够通过添加<code>export</code>关键字来导出。主要有以下三种导出方式：导出声明，语句导出，</p><pre><code>//1.导出声明 //导出定义的接口export interface StringValidator {    isAcceptable(s: string): boolean;} //2.语句导出 //导出类与设置导出别名class ZipCodeValidator implements StringValidator {    isAcceptable(s: string) {        return s.length === 5 &amp;&amp; numberRegexp.test(s);    }}export { ZipCodeValidator };export { ZipCodeValidator as mainValidator }; //3.重新导出 //导出原先的验证器但做了重命名export {ZipCodeValidator as RegExpBasedZipCodeValidator} from "./ZipCodeValidator"; //导出LettersOnlyValidator所有内容export * from "./LettersOnlyValidator"; </code></pre><p><strong>默认导出</strong></p><pre><code>//JQuery.d.ts//导出默认$为JQuerydeclare let $: JQuery;export default $;  //App.ts//导入默认的导出import $ from "JQuery";$("button.continue").html( "Next Step..." );</code></pre><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><p><a href="https://vitejs.cn/" title="vite">vite</a>是一个前端构建工具，可在node环境运行。适合vue程序的开发，工程目录及文件命运要符合vite的要求。可以通过vite init创建一个空白的vue项目作为基础进行开发。</p><pre><code># npm 6.xnpm init vite@latest my-vue-app --template vue # npm 7+, 需要额外的双横线：npm init vite@latest my-vue-app -- --template vue</code></pre><h2 id="Element-Plus"><a href="#Element-Plus" class="headerlink" title="Element Plus"></a>Element Plus</h2><p><a href="https://element-plus.org/zh-CN/#/zh-CN" title="Element Plus">Element Plus</a> 是基于Vue3开发的UI框架，其中包括大量封装好的组件可直接使用，使项目开发更容易。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的路由配置（Vue2和Vue3的路由配置）</title>
      <link href="/2023/01/04/Vue%E7%9A%84%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%EF%BC%88Vue2%E5%92%8CVue3%E7%9A%84%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%EF%BC%89/"/>
      <url>/2023/01/04/Vue%E7%9A%84%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%EF%BC%88Vue2%E5%92%8CVue3%E7%9A%84%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="系列文章目录"><a href="#系列文章目录" class="headerlink" title="系列文章目录"></a>系列文章目录</h1><p><code>Tips：使用Vue3开发项目已经有一段时间了，关于Vue2的路由是如何一步一步搭建的都快要忘记了，今天写着篇文章主要就是回顾一下，在Vue2和Vue3中我们是如何一步一步的配置路由的。</code></p><hr><p><code>提示：最好的进步就是有闲暇时间就敲一敲代码！！！！！</code></p><h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="#%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">系列文章目录</a><ul><li><a href="#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">文章目录</a></li></ul></li><li><a href="#%E4%B8%80%E8%B7%AF%E7%94%B1%E6%98%AF%E4%BB%80%E4%B9%88">一、路由是什么？</a></li><li><a href="#%E4%BA%8Cvue2%E4%B8%AD%E8%B7%AF%E7%94%B1%E7%9A%84%E5%88%9B%E5%BB%BA%E6%AD%A5%E9%AA%A4">二、Vue2中路由的创建步骤</a><ul><li><a href="#1%E5%AE%89%E8%A3%85%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%B7%AF%E7%94%B1%E7%89%88%E6%9C%AC%E8%BF%99%E9%87%8C%E6%88%91%E8%B8%A9%E5%9D%91%E4%BA%86">1.安装正确的路由版本（这里我踩坑了）</a></li><li><a href="#2vue2%E4%B8%AD%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%E7%9A%84%E6%AD%A5%E9%AA%A4">2.vue2中配置路由的步骤</a></li></ul></li><li><a href="#%E4%B8%89vue3%E4%B8%AD%E8%B7%AF%E7%94%B1%E7%9A%84%E5%88%9B%E5%BB%BA%E6%AD%A5%E9%AA%A4">三、Vue3中路由的创建步骤</a><ul><li><a href="#1%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B">1.步骤如下</a></li></ul></li></ul><hr><h1 id="一、路由是什么？"><a href="#一、路由是什么？" class="headerlink" title="一、路由是什么？"></a>一、路由是什么？</h1><blockquote><p><code>Vue</code>中的路由就是.<code>SPA（single page application 单页应用程序）</code> 的路径管理器。</p><p><code>vue-router</code>是Vue.js官方的路由插件，用于构建单页面应用。vue的单页面应用是基于<code>路由</code>和<code>组件</code>的，<code>设定访问路径，并将路径和组件映射起来</code>。在<a href="https://so.csdn.net/so/search?q=vue-router&amp;spm=1001.2101.3001.7020">vue-router</a>单页面应用中，<code>路径之间的切换，就是组件的切换</code>。路由模块的本质就是建立起url和页面之间的映射关系。</p></blockquote><h1 id="二、Vue2中路由的创建步骤"><a href="#二、Vue2中路由的创建步骤" class="headerlink" title="二、Vue2中路由的创建步骤"></a>二、<a href="https://so.csdn.net/so/search?q=Vue2&amp;spm=1001.2101.3001.7020">Vue2</a>中路由的创建步骤</h1><h2 id="1-安装正确的路由版本（这里我踩坑了）"><a href="#1-安装正确的路由版本（这里我踩坑了）" class="headerlink" title="1.安装正确的路由版本（这里我踩坑了）"></a>1.安装正确的路由版本（这里我踩坑了）</h2><p><code>1.首先安装vue-router的时候需要确定版本。 Vue2.0采用的 vue-router 版本为 @^3.5.1</code></p><pre><code>npm i vue-router@^3.5.1 -s  // Vue2安装的方式</code></pre><p><code>2.直接 npm i vue-router -s 这种方式安装会安装最新版本（适用于Vue3）</code></p><pre><code>npm i vue-router -s  //Vue3安装的方式</code></pre><h2 id="2-vue2中配置路由的步骤"><a href="#2-vue2中配置路由的步骤" class="headerlink" title="2.vue2中配置路由的步骤"></a>2.vue2中配置路由的步骤</h2><blockquote><h3 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h3></blockquote><p><code>1.安装 vue-router@3.5.1</code><br><code>2.创建 router文件夹 并创建 index.js</code><br><code>3.引入VueRouter 和 Vue</code><br><code>4.Vue.use(VueRouter)</code><br><code>5.创建VueRouter实例： const router = new VueRouter（{ routes}）</code><br><code>6.配置routes （结构如下图所示）</code><br><code>7.导出router</code><br><code>8. 在main.js中导入刚才的 router</code><br><code>9.注册router</code><br><code>10.创建 router-link 和 router-view</code></p><blockquote><p><code>路由文件代码：</code></p></blockquote><pre><code>//1.导入VueRouterimport Vue from "vue";import VueRouter from 'vue-router'import HelloWord from "../components/HelloWorld.vue";//2.使用路由Vue.use(VueRouter);//3.创建VueRouter的实例const router = new VueRouter({    //tips:不想要 #（锚点）就添加下面代码     mode:'history',     //4.配置路由的path和组件    routes :[        {          path: "/",          name:'home',          component: HelloWord,        },        {          path: "/about",          name:'anout',          component: () =&gt; import("../components/About.vue"),        },      ]})//5.导入路由实例export default router</code></pre><blockquote><p><code>入口文件代码：</code></p></blockquote><pre><code>import Vue from 'vue'import App from './App.vue'//6.引入导出的路由import router from './router/index'Vue.config.productionTip = falsenew Vue({  //7.注册路由  router,  render: h =&gt; h(App),}).$mount('#app')</code></pre><h1 id="三、Vue3中路由的创建步骤"><a href="#三、Vue3中路由的创建步骤" class="headerlink" title="三、Vue3中路由的创建步骤"></a>三、<a href="https://so.csdn.net/so/search?q=Vue3&amp;spm=1001.2101.3001.7020">Vue3</a>中路由的创建步骤</h1><h2 id="1-步骤如下"><a href="#1-步骤如下" class="headerlink" title="1.步骤如下"></a>1.步骤如下</h2><p><code>1. 创建对应的文件夹router 创建 index.js文件，</code><br><code>2. 安装vue-router （vue3.0直接安装就行）</code><br><code>3. 导入createRouter 和 createWebHashHistory</code><br><code>4. 配置routes</code><br><code>5. 使用createRouter注册routes和配置路由模式</code><br><code>6. 导出路由</code><br><code>7. 在main.js中 导入router ，并通过链式 .use(router) 注册</code></p><blockquote><p><code>路由文件代码：</code></p></blockquote><pre><code>import { createRouter, createWebHashHistory } from "vue-router"; import HelloWord from '../components/HelloWorld.vue'const router = createRouter({  history: createWebHashHistory(),  routes: [    {      path: "/",      component:HelloWord    },    {        path:"/about",        component:() =&gt; import("../components/About.vue")    }  ],});export default router</code></pre><blockquote><p><code>入口文件代码：</code></p></blockquote><pre><code>import { createApp } from 'vue'import App from './App.vue'import router from './router'createApp(App).use(router).mount('#app')</code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
